#!/usr/bin/env bash

# Things I like to have
PACKAGES="git fish tmux stow fastfetch sccache"
# Stuff that other tools need to build
PACKAGES+=" curl wget pkg-config unzip make cmake"
# Other things
PACKAGES+=" npm gcc"

PIP_PACKAGES="virtualenv"

CRATES="aichat bat du-dust eza gitui ripgrep cargo-update bob-nvim zellij tealdeer fd-find skim"

echo
echo "Packages to install: $PACKAGES"
read -rp "?Install apt/brew/yum packages? (y/n)? " choice
if [[ $choice =~ ^[Yy]$ ]]; then
  FAILED_PKGS=""
  if command -v brew >/dev/null 2>&1; then
    brew update
    brew upgrade
    for pkg in $PACKAGES; do
        brew install $pkg
	if [ $? -ne 0 ]; then
	    FAILED_PKGS+=" $pkg"
	fi
    done
  elif command -v apt >/dev/null 2>&1; then
    sudo apt update
    sudo apt upgrade -y
    for pkg in $PACKAGES; do
        sudo apt install -y $pkg
	if [ $? -ne 0 ]; then
	    FAILED_PKGS+=" $pkg"
	fi
    done
  else
    echo "No supported package manager found"
  fi

  if [[ -n "$FAILED_PKGS" ]]; then
    echo "Failed to install the following packages:$FAILED_PKGS"
  else
    echo "All packages installed successfully"
  fi
fi

echo
# If cargo is available ask to install crates
if command -v cargo >/dev/null 2>&1; then
  echo "Crates to install: $CRATES"
  read -rp "?Install cargo crates? (y/n)? " choice
  if [[ $choice =~ ^[Yy]$ ]]; then
    read -rp "  ?Install using cargo-binstall? (y/n)? " choice
    FAILED_CRATES=""
    if [[ $choice =~ ^[Yy]$ ]]; then
      cargo install cargo-binstall
      for crate in $CRATES; do
        cargo binstall --no-confirm $crate
	# Fallback to compiled 
	if [ $? -ne 0 ]; then
	  cargo install $crate --locked
	  if [ $? -ne 0 ]; then
	    FAILED_CRATES+=" $crate"
	  fi
	fi
      done
    fi
    read -rp "  ?Install using sccache? (y/n)? " choice
    if [[ $choice =~ ^[Yy]$ ]]; then
      SCCACHE=$(which sccache)
      for crate in $CRATES; do
        RUSTC_WRAPPER=$SCCACHE cargo install $crate --locked
	if [ $? -ne 0 ]; then
	  FAILED_CRATES+=" $crate"
	fi
      done
    fi
    if [[ -n "$FAILED_CRATES" ]]; then
      echo "Failed to find the following crates:$FAILED_CRATES"
    else
      echo "All crates installed successfully"
    fi
  fi

# Rust installation - from https://rustup.rs/
else
  read -rp "?Install rustup? (y/n)? " choice
  if [[ $choice =~ ^[Yy]$ ]]; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    echo "You will need to restart your shell then run this script again to install Cargo crates..."
  fi
fi

echo
if command -v python3 >/dev/null 2>&1; then
  echo "Pip packages to install: $PIP_PACKAGES"
  read -rp "?Install Pip packages? (y/n)? " choice
  if [[ $choice =~ ^[Yy]$ ]]; then
    python3 -m pip install $PIP_PACKAGES
  fi
else 
  echo "Python3 not found, can't install pip packages"
fi

# Neovim from apt is out of date, bob can pull the latest versions
echo
read -rp "?Install neovim using bob? (y/n)? " choice
if [[ $choice =~ ^[Yy]$ ]]; then
  bob use stable
fi

echo
if [[ $SHELL != */fish ]]; then
  read -rp "?Set fish as default shell (y/n)? " choice
  if [[ $choice =~ ^[Yy]$ ]]; then
    chsh -s "$(command -v fish)"
    echo "You may need a terminal/system reboot for this change to stick."
  fi
else
  echo "fish is already default, nothing to do here..."
fi

echo "Done!"
